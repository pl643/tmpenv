abbr B bash --rcfile "$DF"/bashrc -c \'\'
abbr D docker
abbr G git
abbr GA grep git $DF/fishrc \| grep abbr
abbr GC 'git config --global user.email "peter.wt.ly@gmail.com"; git config --global user.name "Peter Ly"'
abbr GCd 'git config --global delta.side-by-side true; git config --global core.pager "delta --line-numbers --dark"'
abbr GCprf 'git config pull.rebase false  # merge (the default strategy)'
abbr GCprt 'git config pull.rebase true   # rebase'
abbr GCpff 'git config pull.ff only       # fast-forward only'
abbr GCg 'echo 192.30.255.112 github.com \| sudo tee -a /etc/hosts'
abbr GH git stash
abbr GL git log --oneline
abbr GS git switch
abbr Gb git branch
abbr Gc "git commit -m ''"
abbr Gca git commit --amend -m \"\"
abbr Gcd 'git config --global core.pager "delta --line-numbers --dark"'
abbr Gco git checkout
abbr Gcp git "commit -m '' ; git push"
abbr Gcu "git commit --amend -m ''; git push --force"
abbr Gh git push
abbr Ghf git push --force
abbr Gi 'echo >> $DF/.gitignore'
abbr Gl git pull
abbr Gm git commit -m
abbr Gr git remote update  # update remote git references
abbr Gs git status
abbr Gsh git show
abbr S sudo
abbr T time
abbr a alias
abbr apt sudo apt
abbr b 'eval echo "Note: cd $OLDPWD; exa -lhF"; cd $OLDPWD'
abbr c cd
abbr dt delta
abbr es 'echo $status'
abbr f fd
abbr ft tokei
abbr g git
abbr ga git add
abbr gc git clone
abbr gco git checkout
abbr gd clear \; git diff
abbr gl "git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%Creset' --abbrev-commit" 
abbr gr rg --color=always
abbr grep rg --color=always
abbr gs clear \; git show
abbr gsw  git switch
abbr gsw- git switch -
abbr h history
abbr l exa -lhF --color=always $argv \| less -FXRM
abbr latz sudo ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
abbr le less
abbr ll exa -lhF --color=always $argv
abbr pi sudo apt -y install
abbr pi sudo apt -y install
abbr ps procs
abbr pu sudo apt update
abbr r rg --color=always
abbr rg rg --color=always
abbr s exa
abbr se showenv
abbr sf source $DF/fishrc
abbr ss exa --color=always
abbr t tmux
abbr t0 tmux set -g window-style fg=colour247,bg=colour232
abbr t1 tmux set -g window-style fg=colour247,bg=colour234
abbr t2 tmux set -g window-style fg=colour247,bg=colour236
abbr t3 tmux set -g window-style fg=colour247,bg=colour238
abbr te cd $DF
abbr ts bash $DF/functions.bash tmux_sort_windows
abbr ty type
abbr u cd ..
abbr v 'run_nvim'
abbr vr /home/ply/.local/bin/nvr  
abbr vri pip3 install neovim-remote
abbr tsb 'tmux set-option -g status-position bottom'
abbr tsblrc 'echo tmux set-option -g status-position bottom >> $TMPENV/localrc.fish'
abbr tst tmux set-option -g status-position top

fish_vi_key_bindings
set fish_greeting

function fish_right_prompt -d "Write out the right prompt"
    printf "%s %s %s" (auto_git_remote_update) (date '+%H:%M:%S') $OS
end

function cd
    set -xg OLDPWD $PWD
    if count $argv > /dev/null
        builtin cd "$argv"; and exa -lhF --color=always | bat -p
    else
        builtin cd ~; and exa -lhF --color=always | bat -p
    end
end

function download_configure_nightly_nvim
    if not test -d "$TMPENV/nvim-linux64"
        cd "$TMPENV"
        curl -sL https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz | tar xfz -
        "$TMPENV/nvim-linux64/bin/nvim" -u "$DF/vimrc" -c PlugInstall -c q -c :q
    end
end

# Install nvim in tmux
function setup_bin
    #set -xg TMPENV /tmp/t 
    if not test -d "$TMPENV"
        echo mkdir $TMPENV
        mkdir $TMPENV
    else
        echo $TMPENV exists
    end
    download_configure_nightly_nvim
    if not test -d "$TMPENV/rust-bin"
        cd $TMPENV
        git clone https://github.com/pl643/rust-bin
    end
    if not test -d "$TMPENV/fzf.fish"
        cd $TMPENV
        git clone https://github.com/PatrickF1/fzf.fish
    end
end

function tmux_setup_bin
    # echo tmux -f $DF/tmux.conf -2 new -s setup_bin -d 'fish $DF/fishrc setup_bin' 
    tmux -f $DF/tmux.conf new -s setup_bin -d 'fish $DF/fishrc setup_bin' 
end

function run_nvim
    download_configure_nightly_nvim
    if test \( -f "$DF/vimrc" -a -f "$TMPENV/nvim-linux64/bin/nvim" \)
        set -x NVIM_LISTEN_ADDRESS /tmp/nvimsocket  # for nvr command
        set -x EDITOR $TMPENV/nvim-linux64/bin/nvim -u $DF/vimrc
        set -x VISUAL $TMPENV/nvim-linux64/bin/nvim -u $DF/vimrc
        set -x PAGER  $TMPENV/nvim-linux64/bin/nvim -u $DF/vimrc
        $EDITOR $argv
        #echo $EDITOR $argv
	#echo inside here:
    end
end

function showenv
    if test (count $argv) -gt 0
        echo (tmux show-environment | grep $argv | cut -f2 -d=)
    else
        tmux show-environment
    end
end

function fish_user_key_bindings
  fish_vi_key_bindings
  bind -M insert -m default jk backward-char force-repaint
#bind -M insert -m default gap "commandline gap"
end

function gap
    clear
    git diff
    commandline "git commit -am '' ; git push"
    commandline -C 16
end

### https://mariuszs.github.io/blog/2013/informative_git_prompt.html
set -g __fish_git_prompt_show_informative_status 1
set -g __fish_git_prompt_hide_untrackedfiles 1

set -g __fish_git_prompt_color_branch magenta --bold
set -g __fish_git_prompt_showupstream "informative"
set -g __fish_git_prompt_char_upstream_ahead "↑"
set -g __fish_git_prompt_char_upstream_behind "↓"
set -g __fish_git_prompt_char_upstream_prefix ""

set -g __fish_git_prompt_char_stagedstate "●"
set -g __fish_git_prompt_char_dirtystate "✚"
set -g __fish_git_prompt_char_untrackedfiles "…"
set -g __fish_git_prompt_char_conflictedstate "✖"
set -g __fish_git_prompt_char_cleanstate "✔"

set -g __fish_git_prompt_color_dirtystate blue
set -g __fish_git_prompt_color_stagedstate yellow
set -g __fish_git_prompt_color_invalidstate red
set -g __fish_git_prompt_color_untrackedfiles $fish_color_normal
set -g __fish_git_prompt_color_cleanstate green --bold

## fish_mode_prompt replace with fish_mode_prompt2 witch is called from within
##   fish_prompt 
#function fish_mode_prompt
#end

function fish_mode_prompt2
  switch $fish_bind_mode
    case default
      set_color --bold red
      echo 'N'
    case insert
      set_color --bold green
      echo ' '
    case replace_one
      set_color --bold green
      echo 'r'
    case replace
      set_color --bold green
      echo 'R'
    case visual
      set_color --bold brmagenta
      echo 'V'
    case '*'
      set_color --bold red
      echo '?'
  end
  set_color normal
end

set -x HOSTNAME (hostname)
set -x format "%s" # default is " %s"  # format for fish_git_prompt
function fish_prompt --description 'Write out the prompt'
    set -l last_pipestatus $pipestatus
    set -lx __fish_last_status $status # Export for __fish_print_pipestatus.
    set -l normal (set_color normal)

    # Color the prompt differently when we're root
    set -l color_cwd $fish_color_cwd
    set -l suffix '>'
    if functions -q fish_is_root_user; and fish_is_root_user
        if set -q fish_color_cwd_root
            set color_cwd $fish_color_cwd_root
        end
        set suffix '#'
    end

    # Write pipestatus
    # If the status was carried over (e.g. after `set`), don't bold it.
    set -l bold_flag --bold
    set -q __fish_prompt_status_generation; or set -g __fish_prompt_status_generation $status_generation
    if test $__fish_prompt_status_generation = $status_generation
        set bold_flag
    end
    set __fish_prompt_status_generation $status_generation
    set -l status_color (set_color $fish_color_status)
    set -l statusb_color (set_color $bold_flag $fish_color_status)
    set -l prompt_status (__fish_print_pipestatus "[" "]" "|" "$status_color" "$statusb_color" $last_pipestatus)

    echo -n -s (prompt_login)' ' (set_color $color_cwd) (prompt_pwd) $normal (fish_vcs_prompt) $normal " "$prompt_status $suffix " "
end

# automatically run git remote update it's been 10 minutes since last ran

set -gx time_between_update 900      # 15 minutes
function auto_git_remote_update
    if ! test -d .git
        # echo Note: no .git folder in current dir
        return
    end
    set -x current_time (date +%s)
    if test -n "$git_remote_update_last_ran"
        set time_diff (math $current_time - $git_remote_update_last_ran)
    end
    if test -z "$git_remote_update_last_ran"; or test $time_diff -gt $time_between_update
        # echo DB autogit: running git remote update
        echo auto_git_remote_update
        git remote update > /dev/null
        set -xg git_remote_update_last_ran $current_time
    else
        # printf "%ds" $time_diff
    end
end

set -x LS_COLORS $LS_COLORS:'di=0;36'  # make more dir more readable
set -x EXA_COLORS "uu=38;5;249:un=38;5;241:gu=38;5;245:gn=38;5;241:da=38;5;245:sn=38;5;7:sb=38;5;7:ur=38;5;3;1:uw=38;5;5;1:ux=38;5;1;1:ue=38;5;1;1:gr=38;5;249:gw=38;5;249:gx=38;5;249:tr=38;5;249:tw=38;5;249:tx=38;5;249:fi=38;5;248:di=38;5;253:ex=38;5;1:xa=38;5;12:*.png=38;5;4:*.jpg=38;5;4:*.gif=38;5;4"
# set -x TMPENV /tmp/.(whoami)
# set -x DF /tmp/.(whoami)/tmpenv

if test -d $TMPENV/rust-bin
    set -x PATH $TMPENV/rust-bin $PATH
end

if test -d $HOME/.cargo/bin
    set -x PATH $HOME/.cargo/bin $PATH
end

source $DF/scripts/br.fish
if test -f "$TMPENV/fzf.fish/conf.d/fzf.fish"
    set fzf_preview_file_cmd bat
    source $TMPENV/fzf.fish/conf.d/fzf.fish $TMPENV/fzf.fish/functions/__fzf_preview_file.fish $TMPENV/fzf.fish/functions/__fzf_search_current_dir.fish
    source $TMPENV/fzf.fish/functions/__fzf_preview_file.fish
    source $TMPENV/fzf.fish/functions/__fzf_search_current_dir.fish
end

if test -n TMUX
    # echo tmux source $DF/tmux.conf
    tmux source $DF/tmux.conf
    tmux source $DF/tmux.gruvbox
end

if not test -d "$TMPENV/nvim-linux64"
   tmux_setup_bin
end

if test -f "$TMPENV/localrc.fish"
   echo "Note: source $TMPENV/localrc.fish"
   source "$TMPENV/localrc.fish"
end

# Allows to run function if function name is passed as argument
if test -n "$argv"
    $argv
else
    printf "Note: last line of $DF/fishrc\n"
end
